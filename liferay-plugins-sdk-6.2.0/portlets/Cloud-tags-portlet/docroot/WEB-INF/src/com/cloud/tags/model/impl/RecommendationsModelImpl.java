/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.Recommendations;
import com.cloud.tags.model.RecommendationsModel;
import com.cloud.tags.model.RecommendationsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Recommendations service. Represents a row in the &quot;recommendations&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.RecommendationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecommendationsImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see RecommendationsImpl
 * @see com.cloud.tags.model.Recommendations
 * @see com.cloud.tags.model.RecommendationsModel
 * @generated
 */
@JSON(strict = true)
public class RecommendationsModelImpl extends BaseModelImpl<Recommendations>
	implements RecommendationsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a recommendations model instance should use the {@link com.cloud.tags.model.Recommendations} interface instead.
	 */
	public static final String TABLE_NAME = "recommendations";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "designer1", Types.VARCHAR },
			{ "designer2", Types.VARCHAR },
			{ "_type", Types.BIGINT },
			{ "percentage", Types.DOUBLE },
			{ "companyId", Types.BIGINT },
			{ "color_name", Types.VARCHAR },
			{ "color_image", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table recommendations (recId LONG not null primary key,designer1 VARCHAR(75) null,designer2 VARCHAR(75) null,_type LONG,percentage DOUBLE,companyId LONG,color_name VARCHAR(75) null,color_image TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table recommendations";
	public static final String ORDER_BY_JPQL = " ORDER BY recommendations.recId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY recommendations.recId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.Recommendations"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.Recommendations"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.Recommendations"),
			true);
	public static long _TYPE_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DESIGNER1_COLUMN_BITMASK = 4L;
	public static long RECID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Recommendations toModel(RecommendationsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Recommendations model = new RecommendationsImpl();

		model.setRecId(soapModel.getRecId());
		model.setDesigner1(soapModel.getDesigner1());
		model.setDesigner2(soapModel.getDesigner2());
		model.set_type(soapModel.get_type());
		model.setPercentage(soapModel.getPercentage());
		model.setCompanyId(soapModel.getCompanyId());
		model.setColor_name(soapModel.getColor_name());
		model.setColor_image(soapModel.getColor_image());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Recommendations> toModels(
		RecommendationsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Recommendations> models = new ArrayList<Recommendations>(soapModels.length);

		for (RecommendationsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.Recommendations"));

	public RecommendationsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Recommendations.class;
	}

	@Override
	public String getModelClassName() {
		return Recommendations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recId", getRecId());
		attributes.put("designer1", getDesigner1());
		attributes.put("designer2", getDesigner2());
		attributes.put("_type", get_type());
		attributes.put("percentage", getPercentage());
		attributes.put("companyId", getCompanyId());
		attributes.put("color_name", getColor_name());
		attributes.put("color_image", getColor_image());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recId = (Long)attributes.get("recId");

		if (recId != null) {
			setRecId(recId);
		}

		String designer1 = (String)attributes.get("designer1");

		if (designer1 != null) {
			setDesigner1(designer1);
		}

		String designer2 = (String)attributes.get("designer2");

		if (designer2 != null) {
			setDesigner2(designer2);
		}

		Long _type = (Long)attributes.get("_type");

		if (_type != null) {
			set_type(_type);
		}

		Double percentage = (Double)attributes.get("percentage");

		if (percentage != null) {
			setPercentage(percentage);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String color_name = (String)attributes.get("color_name");

		if (color_name != null) {
			setColor_name(color_name);
		}

		String color_image = (String)attributes.get("color_image");

		if (color_image != null) {
			setColor_image(color_image);
		}
	}

	@JSON
	@Override
	public long getRecId() {
		return _recId;
	}

	@Override
	public void setRecId(long recId) {
		_recId = recId;
	}

	@JSON
	@Override
	public String getDesigner1() {
		if (_designer1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _designer1;
		}
	}

	@Override
	public void setDesigner1(String designer1) {
		_columnBitmask |= DESIGNER1_COLUMN_BITMASK;

		if (_originalDesigner1 == null) {
			_originalDesigner1 = _designer1;
		}

		_designer1 = designer1;
	}

	public String getOriginalDesigner1() {
		return GetterUtil.getString(_originalDesigner1);
	}

	@JSON
	@Override
	public String getDesigner2() {
		if (_designer2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _designer2;
		}
	}

	@Override
	public void setDesigner2(String designer2) {
		_designer2 = designer2;
	}

	@JSON
	@Override
	public long get_type() {
		return __type;
	}

	@Override
	public void set_type(long _type) {
		_columnBitmask |= _TYPE_COLUMN_BITMASK;

		if (!_setOriginal_type) {
			_setOriginal_type = true;

			_original_type = __type;
		}

		__type = _type;
	}

	public long getOriginal_type() {
		return _original_type;
	}

	@JSON
	@Override
	public double getPercentage() {
		return _percentage;
	}

	@Override
	public void setPercentage(double percentage) {
		_percentage = percentage;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getColor_name() {
		if (_color_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _color_name;
		}
	}

	@Override
	public void setColor_name(String color_name) {
		_color_name = color_name;
	}

	@JSON
	@Override
	public String getColor_image() {
		if (_color_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _color_image;
		}
	}

	@Override
	public void setColor_image(String color_image) {
		_color_image = color_image;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Recommendations.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Recommendations toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Recommendations)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecommendationsImpl recommendationsImpl = new RecommendationsImpl();

		recommendationsImpl.setRecId(getRecId());
		recommendationsImpl.setDesigner1(getDesigner1());
		recommendationsImpl.setDesigner2(getDesigner2());
		recommendationsImpl.set_type(get_type());
		recommendationsImpl.setPercentage(getPercentage());
		recommendationsImpl.setCompanyId(getCompanyId());
		recommendationsImpl.setColor_name(getColor_name());
		recommendationsImpl.setColor_image(getColor_image());

		recommendationsImpl.resetOriginalValues();

		return recommendationsImpl;
	}

	@Override
	public int compareTo(Recommendations recommendations) {
		long primaryKey = recommendations.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Recommendations)) {
			return false;
		}

		Recommendations recommendations = (Recommendations)obj;

		long primaryKey = recommendations.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RecommendationsModelImpl recommendationsModelImpl = this;

		recommendationsModelImpl._originalDesigner1 = recommendationsModelImpl._designer1;

		recommendationsModelImpl._original_type = recommendationsModelImpl.__type;

		recommendationsModelImpl._setOriginal_type = false;

		recommendationsModelImpl._originalCompanyId = recommendationsModelImpl._companyId;

		recommendationsModelImpl._setOriginalCompanyId = false;

		recommendationsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Recommendations> toCacheModel() {
		RecommendationsCacheModel recommendationsCacheModel = new RecommendationsCacheModel();

		recommendationsCacheModel.recId = getRecId();

		recommendationsCacheModel.designer1 = getDesigner1();

		String designer1 = recommendationsCacheModel.designer1;

		if ((designer1 != null) && (designer1.length() == 0)) {
			recommendationsCacheModel.designer1 = null;
		}

		recommendationsCacheModel.designer2 = getDesigner2();

		String designer2 = recommendationsCacheModel.designer2;

		if ((designer2 != null) && (designer2.length() == 0)) {
			recommendationsCacheModel.designer2 = null;
		}

		recommendationsCacheModel._type = get_type();

		recommendationsCacheModel.percentage = getPercentage();

		recommendationsCacheModel.companyId = getCompanyId();

		recommendationsCacheModel.color_name = getColor_name();

		String color_name = recommendationsCacheModel.color_name;

		if ((color_name != null) && (color_name.length() == 0)) {
			recommendationsCacheModel.color_name = null;
		}

		recommendationsCacheModel.color_image = getColor_image();

		String color_image = recommendationsCacheModel.color_image;

		if ((color_image != null) && (color_image.length() == 0)) {
			recommendationsCacheModel.color_image = null;
		}

		return recommendationsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", designer1=");
		sb.append(getDesigner1());
		sb.append(", designer2=");
		sb.append(getDesigner2());
		sb.append(", _type=");
		sb.append(get_type());
		sb.append(", percentage=");
		sb.append(getPercentage());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", color_name=");
		sb.append(getColor_name());
		sb.append(", color_image=");
		sb.append(getColor_image());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.Recommendations");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designer1</column-name><column-value><![CDATA[");
		sb.append(getDesigner1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designer2</column-name><column-value><![CDATA[");
		sb.append(getDesigner2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>_type</column-name><column-value><![CDATA[");
		sb.append(get_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentage</column-name><column-value><![CDATA[");
		sb.append(getPercentage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color_name</column-name><column-value><![CDATA[");
		sb.append(getColor_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color_image</column-name><column-value><![CDATA[");
		sb.append(getColor_image());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Recommendations.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Recommendations.class
		};
	private long _recId;
	private String _designer1;
	private String _originalDesigner1;
	private String _designer2;
	private long __type;
	private long _original_type;
	private boolean _setOriginal_type;
	private double _percentage;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _color_name;
	private String _color_image;
	private long _columnBitmask;
	private Recommendations _escapedModel;
}