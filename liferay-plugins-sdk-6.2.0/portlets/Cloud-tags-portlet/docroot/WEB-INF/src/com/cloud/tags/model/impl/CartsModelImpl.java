/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.Carts;
import com.cloud.tags.model.CartsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Carts service. Represents a row in the &quot;carts&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.CartsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CartsImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see CartsImpl
 * @see com.cloud.tags.model.Carts
 * @see com.cloud.tags.model.CartsModel
 * @generated
 */
public class CartsModelImpl extends BaseModelImpl<Carts> implements CartsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a carts model instance should use the {@link com.cloud.tags.model.Carts} interface instead.
	 */
	public static final String TABLE_NAME = "carts";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cartId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "session_id", Types.VARCHAR },
			{ "staffId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table carts (cartId LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,session_id VARCHAR(75) null,staffId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table carts";
	public static final String ORDER_BY_JPQL = " ORDER BY carts.cartId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY carts.cartId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.Carts"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.Carts"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.Carts"),
			true);
	public static long SESSION_ID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long CARTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.Carts"));

	public CartsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cartId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCartId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cartId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Carts.class;
	}

	@Override
	public String getModelClassName() {
		return Carts.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cartId", getCartId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("session_id", getSession_id());
		attributes.put("staffId", getStaffId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cartId = (Long)attributes.get("cartId");

		if (cartId != null) {
			setCartId(cartId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String session_id = (String)attributes.get("session_id");

		if (session_id != null) {
			setSession_id(session_id);
		}

		String staffId = (String)attributes.get("staffId");

		if (staffId != null) {
			setStaffId(staffId);
		}
	}

	@Override
	public long getCartId() {
		return _cartId;
	}

	@Override
	public void setCartId(long cartId) {
		_cartId = cartId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSession_id() {
		if (_session_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _session_id;
		}
	}

	@Override
	public void setSession_id(String session_id) {
		_columnBitmask |= SESSION_ID_COLUMN_BITMASK;

		if (_originalSession_id == null) {
			_originalSession_id = _session_id;
		}

		_session_id = session_id;
	}

	public String getOriginalSession_id() {
		return GetterUtil.getString(_originalSession_id);
	}

	@Override
	public String getStaffId() {
		if (_staffId == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffId;
		}
	}

	@Override
	public void setStaffId(String staffId) {
		_staffId = staffId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Carts.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Carts toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Carts)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CartsImpl cartsImpl = new CartsImpl();

		cartsImpl.setCartId(getCartId());
		cartsImpl.setUserId(getUserId());
		cartsImpl.setCreateDate(getCreateDate());
		cartsImpl.setModifiedDate(getModifiedDate());
		cartsImpl.setSession_id(getSession_id());
		cartsImpl.setStaffId(getStaffId());

		cartsImpl.resetOriginalValues();

		return cartsImpl;
	}

	@Override
	public int compareTo(Carts carts) {
		long primaryKey = carts.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Carts)) {
			return false;
		}

		Carts carts = (Carts)obj;

		long primaryKey = carts.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CartsModelImpl cartsModelImpl = this;

		cartsModelImpl._originalUserId = cartsModelImpl._userId;

		cartsModelImpl._setOriginalUserId = false;

		cartsModelImpl._originalSession_id = cartsModelImpl._session_id;

		cartsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Carts> toCacheModel() {
		CartsCacheModel cartsCacheModel = new CartsCacheModel();

		cartsCacheModel.cartId = getCartId();

		cartsCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cartsCacheModel.createDate = createDate.getTime();
		}
		else {
			cartsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cartsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cartsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cartsCacheModel.session_id = getSession_id();

		String session_id = cartsCacheModel.session_id;

		if ((session_id != null) && (session_id.length() == 0)) {
			cartsCacheModel.session_id = null;
		}

		cartsCacheModel.staffId = getStaffId();

		String staffId = cartsCacheModel.staffId;

		if ((staffId != null) && (staffId.length() == 0)) {
			cartsCacheModel.staffId = null;
		}

		return cartsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{cartId=");
		sb.append(getCartId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", session_id=");
		sb.append(getSession_id());
		sb.append(", staffId=");
		sb.append(getStaffId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.Carts");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cartId</column-name><column-value><![CDATA[");
		sb.append(getCartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>session_id</column-name><column-value><![CDATA[");
		sb.append(getSession_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffId</column-name><column-value><![CDATA[");
		sb.append(getStaffId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Carts.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Carts.class };
	private long _cartId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _session_id;
	private String _originalSession_id;
	private String _staffId;
	private long _columnBitmask;
	private Carts _escapedModel;
}