/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.CustomerImages;
import com.cloud.tags.model.CustomerImagesModel;
import com.cloud.tags.model.CustomerImagesSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CustomerImages service. Represents a row in the &quot;designers_customer_images&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.CustomerImagesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImagesImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see CustomerImagesImpl
 * @see com.cloud.tags.model.CustomerImages
 * @see com.cloud.tags.model.CustomerImagesModel
 * @generated
 */
@JSON(strict = true)
public class CustomerImagesModelImpl extends BaseModelImpl<CustomerImages>
	implements CustomerImagesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer images model instance should use the {@link com.cloud.tags.model.CustomerImages} interface instead.
	 */
	public static final String TABLE_NAME = "designers_customer_images";
	public static final Object[][] TABLE_COLUMNS = {
			{ "customerImageId", Types.BIGINT },
			{ "designerSKU", Types.VARCHAR },
			{ "designerCusImage", Types.VARCHAR },
			{ "customerImage", Types.VARCHAR },
			{ "customerName", Types.VARCHAR },
			{ "customerAddress", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table designers_customer_images (customerImageId LONG not null primary key,designerSKU VARCHAR(75) null,designerCusImage TEXT null,customerImage TEXT null,customerName TEXT null,customerAddress TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table designers_customer_images";
	public static final String ORDER_BY_JPQL = " ORDER BY customerImages.customerImageId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY designers_customer_images.customerImageId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.CustomerImages"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.CustomerImages"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.CustomerImages"),
			true);
	public static long DESIGNERSKU_COLUMN_BITMASK = 1L;
	public static long CUSTOMERIMAGEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CustomerImages toModel(CustomerImagesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CustomerImages model = new CustomerImagesImpl();

		model.setCustomerImageId(soapModel.getCustomerImageId());
		model.setDesignerSKU(soapModel.getDesignerSKU());
		model.setDesignerCusImage(soapModel.getDesignerCusImage());
		model.setCustomerImage(soapModel.getCustomerImage());
		model.setCustomerName(soapModel.getCustomerName());
		model.setCustomerAddress(soapModel.getCustomerAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CustomerImages> toModels(CustomerImagesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CustomerImages> models = new ArrayList<CustomerImages>(soapModels.length);

		for (CustomerImagesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.CustomerImages"));

	public CustomerImagesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CustomerImages.class;
	}

	@Override
	public String getModelClassName() {
		return CustomerImages.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("customerImageId", getCustomerImageId());
		attributes.put("designerSKU", getDesignerSKU());
		attributes.put("designerCusImage", getDesignerCusImage());
		attributes.put("customerImage", getCustomerImage());
		attributes.put("customerName", getCustomerName());
		attributes.put("customerAddress", getCustomerAddress());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long customerImageId = (Long)attributes.get("customerImageId");

		if (customerImageId != null) {
			setCustomerImageId(customerImageId);
		}

		String designerSKU = (String)attributes.get("designerSKU");

		if (designerSKU != null) {
			setDesignerSKU(designerSKU);
		}

		String designerCusImage = (String)attributes.get("designerCusImage");

		if (designerCusImage != null) {
			setDesignerCusImage(designerCusImage);
		}

		String customerImage = (String)attributes.get("customerImage");

		if (customerImage != null) {
			setCustomerImage(customerImage);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		String customerAddress = (String)attributes.get("customerAddress");

		if (customerAddress != null) {
			setCustomerAddress(customerAddress);
		}
	}

	@JSON
	@Override
	public long getCustomerImageId() {
		return _customerImageId;
	}

	@Override
	public void setCustomerImageId(long customerImageId) {
		_customerImageId = customerImageId;
	}

	@JSON
	@Override
	public String getDesignerSKU() {
		if (_designerSKU == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerSKU;
		}
	}

	@Override
	public void setDesignerSKU(String designerSKU) {
		_columnBitmask |= DESIGNERSKU_COLUMN_BITMASK;

		if (_originalDesignerSKU == null) {
			_originalDesignerSKU = _designerSKU;
		}

		_designerSKU = designerSKU;
	}

	public String getOriginalDesignerSKU() {
		return GetterUtil.getString(_originalDesignerSKU);
	}

	@JSON
	@Override
	public String getDesignerCusImage() {
		if (_designerCusImage == null) {
			return StringPool.BLANK;
		}
		else {
			return _designerCusImage;
		}
	}

	@Override
	public void setDesignerCusImage(String designerCusImage) {
		_designerCusImage = designerCusImage;
	}

	@JSON
	@Override
	public String getCustomerImage() {
		if (_customerImage == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerImage;
		}
	}

	@Override
	public void setCustomerImage(String customerImage) {
		_customerImage = customerImage;
	}

	@JSON
	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_customerName = customerName;
	}

	@JSON
	@Override
	public String getCustomerAddress() {
		if (_customerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerAddress;
		}
	}

	@Override
	public void setCustomerAddress(String customerAddress) {
		_customerAddress = customerAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CustomerImages.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CustomerImages toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CustomerImages)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImagesImpl customerImagesImpl = new CustomerImagesImpl();

		customerImagesImpl.setCustomerImageId(getCustomerImageId());
		customerImagesImpl.setDesignerSKU(getDesignerSKU());
		customerImagesImpl.setDesignerCusImage(getDesignerCusImage());
		customerImagesImpl.setCustomerImage(getCustomerImage());
		customerImagesImpl.setCustomerName(getCustomerName());
		customerImagesImpl.setCustomerAddress(getCustomerAddress());

		customerImagesImpl.resetOriginalValues();

		return customerImagesImpl;
	}

	@Override
	public int compareTo(CustomerImages customerImages) {
		long primaryKey = customerImages.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CustomerImages)) {
			return false;
		}

		CustomerImages customerImages = (CustomerImages)obj;

		long primaryKey = customerImages.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CustomerImagesModelImpl customerImagesModelImpl = this;

		customerImagesModelImpl._originalDesignerSKU = customerImagesModelImpl._designerSKU;

		customerImagesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CustomerImages> toCacheModel() {
		CustomerImagesCacheModel customerImagesCacheModel = new CustomerImagesCacheModel();

		customerImagesCacheModel.customerImageId = getCustomerImageId();

		customerImagesCacheModel.designerSKU = getDesignerSKU();

		String designerSKU = customerImagesCacheModel.designerSKU;

		if ((designerSKU != null) && (designerSKU.length() == 0)) {
			customerImagesCacheModel.designerSKU = null;
		}

		customerImagesCacheModel.designerCusImage = getDesignerCusImage();

		String designerCusImage = customerImagesCacheModel.designerCusImage;

		if ((designerCusImage != null) && (designerCusImage.length() == 0)) {
			customerImagesCacheModel.designerCusImage = null;
		}

		customerImagesCacheModel.customerImage = getCustomerImage();

		String customerImage = customerImagesCacheModel.customerImage;

		if ((customerImage != null) && (customerImage.length() == 0)) {
			customerImagesCacheModel.customerImage = null;
		}

		customerImagesCacheModel.customerName = getCustomerName();

		String customerName = customerImagesCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			customerImagesCacheModel.customerName = null;
		}

		customerImagesCacheModel.customerAddress = getCustomerAddress();

		String customerAddress = customerImagesCacheModel.customerAddress;

		if ((customerAddress != null) && (customerAddress.length() == 0)) {
			customerImagesCacheModel.customerAddress = null;
		}

		return customerImagesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{customerImageId=");
		sb.append(getCustomerImageId());
		sb.append(", designerSKU=");
		sb.append(getDesignerSKU());
		sb.append(", designerCusImage=");
		sb.append(getDesignerCusImage());
		sb.append(", customerImage=");
		sb.append(getCustomerImage());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", customerAddress=");
		sb.append(getCustomerAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.CustomerImages");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>customerImageId</column-name><column-value><![CDATA[");
		sb.append(getCustomerImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerSKU</column-name><column-value><![CDATA[");
		sb.append(getDesignerSKU());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designerCusImage</column-name><column-value><![CDATA[");
		sb.append(getDesignerCusImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerImage</column-name><column-value><![CDATA[");
		sb.append(getCustomerImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerAddress</column-name><column-value><![CDATA[");
		sb.append(getCustomerAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CustomerImages.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CustomerImages.class
		};
	private long _customerImageId;
	private String _designerSKU;
	private String _originalDesignerSKU;
	private String _designerCusImage;
	private String _customerImage;
	private String _customerName;
	private String _customerAddress;
	private long _columnBitmask;
	private CustomerImages _escapedModel;
}