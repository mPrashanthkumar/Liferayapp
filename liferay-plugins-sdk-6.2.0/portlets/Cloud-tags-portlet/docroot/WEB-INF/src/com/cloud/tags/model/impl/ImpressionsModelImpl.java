/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.Impressions;
import com.cloud.tags.model.ImpressionsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Impressions service. Represents a row in the &quot;Impressions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.ImpressionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpressionsImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see ImpressionsImpl
 * @see com.cloud.tags.model.Impressions
 * @see com.cloud.tags.model.ImpressionsModel
 * @generated
 */
public class ImpressionsModelImpl extends BaseModelImpl<Impressions>
	implements ImpressionsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a impressions model instance should use the {@link com.cloud.tags.model.Impressions} interface instead.
	 */
	public static final String TABLE_NAME = "Impressions";
	public static final Object[][] TABLE_COLUMNS = {
			{ "recId", Types.BIGINT },
			{ "impressionType", Types.VARCHAR },
			{ "impressionId", Types.VARCHAR },
			{ "impressionAction", Types.VARCHAR },
			{ "ipAddress", Types.VARCHAR },
			{ "deviceType", Types.VARCHAR },
			{ "deviceName", Types.VARCHAR },
			{ "deviceWidth", Types.VARCHAR },
			{ "ideviceBrowser", Types.VARCHAR },
			{ "session_Id", Types.VARCHAR },
			{ "companyId", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "storeDeviceId", Types.BIGINT },
			{ "staffId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Impressions (recId LONG not null primary key,impressionType VARCHAR(75) null,impressionId VARCHAR(75) null,impressionAction VARCHAR(75) null,ipAddress VARCHAR(75) null,deviceType VARCHAR(75) null,deviceName VARCHAR(75) null,deviceWidth VARCHAR(75) null,ideviceBrowser VARCHAR(75) null,session_Id VARCHAR(75) null,companyId VARCHAR(75) null,createDate DATE null,storeDeviceId LONG,staffId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Impressions";
	public static final String ORDER_BY_JPQL = " ORDER BY impressions.recId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Impressions.recId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.Impressions"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.Impressions"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.Impressions"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long IMPRESSIONACTION_COLUMN_BITMASK = 2L;
	public static long IMPRESSIONTYPE_COLUMN_BITMASK = 4L;
	public static long SESSION_ID_COLUMN_BITMASK = 8L;
	public static long STAFFID_COLUMN_BITMASK = 16L;
	public static long STOREDEVICEID_COLUMN_BITMASK = 32L;
	public static long RECID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.Impressions"));

	public ImpressionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Impressions.class;
	}

	@Override
	public String getModelClassName() {
		return Impressions.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("recId", getRecId());
		attributes.put("impressionType", getImpressionType());
		attributes.put("impressionId", getImpressionId());
		attributes.put("impressionAction", getImpressionAction());
		attributes.put("ipAddress", getIpAddress());
		attributes.put("deviceType", getDeviceType());
		attributes.put("deviceName", getDeviceName());
		attributes.put("deviceWidth", getDeviceWidth());
		attributes.put("ideviceBrowser", getIdeviceBrowser());
		attributes.put("session_Id", getSession_Id());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("storeDeviceId", getStoreDeviceId());
		attributes.put("staffId", getStaffId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long recId = (Long)attributes.get("recId");

		if (recId != null) {
			setRecId(recId);
		}

		String impressionType = (String)attributes.get("impressionType");

		if (impressionType != null) {
			setImpressionType(impressionType);
		}

		String impressionId = (String)attributes.get("impressionId");

		if (impressionId != null) {
			setImpressionId(impressionId);
		}

		String impressionAction = (String)attributes.get("impressionAction");

		if (impressionAction != null) {
			setImpressionAction(impressionAction);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}

		String deviceType = (String)attributes.get("deviceType");

		if (deviceType != null) {
			setDeviceType(deviceType);
		}

		String deviceName = (String)attributes.get("deviceName");

		if (deviceName != null) {
			setDeviceName(deviceName);
		}

		String deviceWidth = (String)attributes.get("deviceWidth");

		if (deviceWidth != null) {
			setDeviceWidth(deviceWidth);
		}

		String ideviceBrowser = (String)attributes.get("ideviceBrowser");

		if (ideviceBrowser != null) {
			setIdeviceBrowser(ideviceBrowser);
		}

		String session_Id = (String)attributes.get("session_Id");

		if (session_Id != null) {
			setSession_Id(session_Id);
		}

		String companyId = (String)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long storeDeviceId = (Long)attributes.get("storeDeviceId");

		if (storeDeviceId != null) {
			setStoreDeviceId(storeDeviceId);
		}

		String staffId = (String)attributes.get("staffId");

		if (staffId != null) {
			setStaffId(staffId);
		}
	}

	@Override
	public long getRecId() {
		return _recId;
	}

	@Override
	public void setRecId(long recId) {
		_recId = recId;
	}

	@Override
	public String getImpressionType() {
		if (_impressionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _impressionType;
		}
	}

	@Override
	public void setImpressionType(String impressionType) {
		_columnBitmask |= IMPRESSIONTYPE_COLUMN_BITMASK;

		if (_originalImpressionType == null) {
			_originalImpressionType = _impressionType;
		}

		_impressionType = impressionType;
	}

	public String getOriginalImpressionType() {
		return GetterUtil.getString(_originalImpressionType);
	}

	@Override
	public String getImpressionId() {
		if (_impressionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _impressionId;
		}
	}

	@Override
	public void setImpressionId(String impressionId) {
		_impressionId = impressionId;
	}

	@Override
	public String getImpressionAction() {
		if (_impressionAction == null) {
			return StringPool.BLANK;
		}
		else {
			return _impressionAction;
		}
	}

	@Override
	public void setImpressionAction(String impressionAction) {
		_columnBitmask |= IMPRESSIONACTION_COLUMN_BITMASK;

		if (_originalImpressionAction == null) {
			_originalImpressionAction = _impressionAction;
		}

		_impressionAction = impressionAction;
	}

	public String getOriginalImpressionAction() {
		return GetterUtil.getString(_originalImpressionAction);
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	@Override
	public String getDeviceType() {
		if (_deviceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceType;
		}
	}

	@Override
	public void setDeviceType(String deviceType) {
		_deviceType = deviceType;
	}

	@Override
	public String getDeviceName() {
		if (_deviceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceName;
		}
	}

	@Override
	public void setDeviceName(String deviceName) {
		_deviceName = deviceName;
	}

	@Override
	public String getDeviceWidth() {
		if (_deviceWidth == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceWidth;
		}
	}

	@Override
	public void setDeviceWidth(String deviceWidth) {
		_deviceWidth = deviceWidth;
	}

	@Override
	public String getIdeviceBrowser() {
		if (_ideviceBrowser == null) {
			return StringPool.BLANK;
		}
		else {
			return _ideviceBrowser;
		}
	}

	@Override
	public void setIdeviceBrowser(String ideviceBrowser) {
		_ideviceBrowser = ideviceBrowser;
	}

	@Override
	public String getSession_Id() {
		if (_session_Id == null) {
			return StringPool.BLANK;
		}
		else {
			return _session_Id;
		}
	}

	@Override
	public void setSession_Id(String session_Id) {
		_columnBitmask |= SESSION_ID_COLUMN_BITMASK;

		if (_originalSession_Id == null) {
			_originalSession_Id = _session_Id;
		}

		_session_Id = session_Id;
	}

	public String getOriginalSession_Id() {
		return GetterUtil.getString(_originalSession_Id);
	}

	@Override
	public String getCompanyId() {
		if (_companyId == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyId;
		}
	}

	@Override
	public void setCompanyId(String companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (_originalCompanyId == null) {
			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public String getOriginalCompanyId() {
		return GetterUtil.getString(_originalCompanyId);
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getStoreDeviceId() {
		return _storeDeviceId;
	}

	@Override
	public void setStoreDeviceId(long storeDeviceId) {
		_columnBitmask |= STOREDEVICEID_COLUMN_BITMASK;

		if (!_setOriginalStoreDeviceId) {
			_setOriginalStoreDeviceId = true;

			_originalStoreDeviceId = _storeDeviceId;
		}

		_storeDeviceId = storeDeviceId;
	}

	public long getOriginalStoreDeviceId() {
		return _originalStoreDeviceId;
	}

	@Override
	public String getStaffId() {
		if (_staffId == null) {
			return StringPool.BLANK;
		}
		else {
			return _staffId;
		}
	}

	@Override
	public void setStaffId(String staffId) {
		_columnBitmask |= STAFFID_COLUMN_BITMASK;

		if (_originalStaffId == null) {
			_originalStaffId = _staffId;
		}

		_staffId = staffId;
	}

	public String getOriginalStaffId() {
		return GetterUtil.getString(_originalStaffId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Impressions.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Impressions toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Impressions)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImpressionsImpl impressionsImpl = new ImpressionsImpl();

		impressionsImpl.setRecId(getRecId());
		impressionsImpl.setImpressionType(getImpressionType());
		impressionsImpl.setImpressionId(getImpressionId());
		impressionsImpl.setImpressionAction(getImpressionAction());
		impressionsImpl.setIpAddress(getIpAddress());
		impressionsImpl.setDeviceType(getDeviceType());
		impressionsImpl.setDeviceName(getDeviceName());
		impressionsImpl.setDeviceWidth(getDeviceWidth());
		impressionsImpl.setIdeviceBrowser(getIdeviceBrowser());
		impressionsImpl.setSession_Id(getSession_Id());
		impressionsImpl.setCompanyId(getCompanyId());
		impressionsImpl.setCreateDate(getCreateDate());
		impressionsImpl.setStoreDeviceId(getStoreDeviceId());
		impressionsImpl.setStaffId(getStaffId());

		impressionsImpl.resetOriginalValues();

		return impressionsImpl;
	}

	@Override
	public int compareTo(Impressions impressions) {
		long primaryKey = impressions.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Impressions)) {
			return false;
		}

		Impressions impressions = (Impressions)obj;

		long primaryKey = impressions.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ImpressionsModelImpl impressionsModelImpl = this;

		impressionsModelImpl._originalImpressionType = impressionsModelImpl._impressionType;

		impressionsModelImpl._originalImpressionAction = impressionsModelImpl._impressionAction;

		impressionsModelImpl._originalSession_Id = impressionsModelImpl._session_Id;

		impressionsModelImpl._originalCompanyId = impressionsModelImpl._companyId;

		impressionsModelImpl._originalStoreDeviceId = impressionsModelImpl._storeDeviceId;

		impressionsModelImpl._setOriginalStoreDeviceId = false;

		impressionsModelImpl._originalStaffId = impressionsModelImpl._staffId;

		impressionsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Impressions> toCacheModel() {
		ImpressionsCacheModel impressionsCacheModel = new ImpressionsCacheModel();

		impressionsCacheModel.recId = getRecId();

		impressionsCacheModel.impressionType = getImpressionType();

		String impressionType = impressionsCacheModel.impressionType;

		if ((impressionType != null) && (impressionType.length() == 0)) {
			impressionsCacheModel.impressionType = null;
		}

		impressionsCacheModel.impressionId = getImpressionId();

		String impressionId = impressionsCacheModel.impressionId;

		if ((impressionId != null) && (impressionId.length() == 0)) {
			impressionsCacheModel.impressionId = null;
		}

		impressionsCacheModel.impressionAction = getImpressionAction();

		String impressionAction = impressionsCacheModel.impressionAction;

		if ((impressionAction != null) && (impressionAction.length() == 0)) {
			impressionsCacheModel.impressionAction = null;
		}

		impressionsCacheModel.ipAddress = getIpAddress();

		String ipAddress = impressionsCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			impressionsCacheModel.ipAddress = null;
		}

		impressionsCacheModel.deviceType = getDeviceType();

		String deviceType = impressionsCacheModel.deviceType;

		if ((deviceType != null) && (deviceType.length() == 0)) {
			impressionsCacheModel.deviceType = null;
		}

		impressionsCacheModel.deviceName = getDeviceName();

		String deviceName = impressionsCacheModel.deviceName;

		if ((deviceName != null) && (deviceName.length() == 0)) {
			impressionsCacheModel.deviceName = null;
		}

		impressionsCacheModel.deviceWidth = getDeviceWidth();

		String deviceWidth = impressionsCacheModel.deviceWidth;

		if ((deviceWidth != null) && (deviceWidth.length() == 0)) {
			impressionsCacheModel.deviceWidth = null;
		}

		impressionsCacheModel.ideviceBrowser = getIdeviceBrowser();

		String ideviceBrowser = impressionsCacheModel.ideviceBrowser;

		if ((ideviceBrowser != null) && (ideviceBrowser.length() == 0)) {
			impressionsCacheModel.ideviceBrowser = null;
		}

		impressionsCacheModel.session_Id = getSession_Id();

		String session_Id = impressionsCacheModel.session_Id;

		if ((session_Id != null) && (session_Id.length() == 0)) {
			impressionsCacheModel.session_Id = null;
		}

		impressionsCacheModel.companyId = getCompanyId();

		String companyId = impressionsCacheModel.companyId;

		if ((companyId != null) && (companyId.length() == 0)) {
			impressionsCacheModel.companyId = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			impressionsCacheModel.createDate = createDate.getTime();
		}
		else {
			impressionsCacheModel.createDate = Long.MIN_VALUE;
		}

		impressionsCacheModel.storeDeviceId = getStoreDeviceId();

		impressionsCacheModel.staffId = getStaffId();

		String staffId = impressionsCacheModel.staffId;

		if ((staffId != null) && (staffId.length() == 0)) {
			impressionsCacheModel.staffId = null;
		}

		return impressionsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{recId=");
		sb.append(getRecId());
		sb.append(", impressionType=");
		sb.append(getImpressionType());
		sb.append(", impressionId=");
		sb.append(getImpressionId());
		sb.append(", impressionAction=");
		sb.append(getImpressionAction());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append(", deviceType=");
		sb.append(getDeviceType());
		sb.append(", deviceName=");
		sb.append(getDeviceName());
		sb.append(", deviceWidth=");
		sb.append(getDeviceWidth());
		sb.append(", ideviceBrowser=");
		sb.append(getIdeviceBrowser());
		sb.append(", session_Id=");
		sb.append(getSession_Id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", storeDeviceId=");
		sb.append(getStoreDeviceId());
		sb.append(", staffId=");
		sb.append(getStaffId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.Impressions");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>recId</column-name><column-value><![CDATA[");
		sb.append(getRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impressionType</column-name><column-value><![CDATA[");
		sb.append(getImpressionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impressionId</column-name><column-value><![CDATA[");
		sb.append(getImpressionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>impressionAction</column-name><column-value><![CDATA[");
		sb.append(getImpressionAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceType</column-name><column-value><![CDATA[");
		sb.append(getDeviceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceName</column-name><column-value><![CDATA[");
		sb.append(getDeviceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceWidth</column-name><column-value><![CDATA[");
		sb.append(getDeviceWidth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ideviceBrowser</column-name><column-value><![CDATA[");
		sb.append(getIdeviceBrowser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>session_Id</column-name><column-value><![CDATA[");
		sb.append(getSession_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>storeDeviceId</column-name><column-value><![CDATA[");
		sb.append(getStoreDeviceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>staffId</column-name><column-value><![CDATA[");
		sb.append(getStaffId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Impressions.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Impressions.class
		};
	private long _recId;
	private String _impressionType;
	private String _originalImpressionType;
	private String _impressionId;
	private String _impressionAction;
	private String _originalImpressionAction;
	private String _ipAddress;
	private String _deviceType;
	private String _deviceName;
	private String _deviceWidth;
	private String _ideviceBrowser;
	private String _session_Id;
	private String _originalSession_Id;
	private String _companyId;
	private String _originalCompanyId;
	private Date _createDate;
	private long _storeDeviceId;
	private long _originalStoreDeviceId;
	private boolean _setOriginalStoreDeviceId;
	private String _staffId;
	private String _originalStaffId;
	private long _columnBitmask;
	private Impressions _escapedModel;
}