/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.StoreInformationMap;
import com.cloud.tags.model.StoreInformationMapModel;
import com.cloud.tags.model.StoreInformationMapSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StoreInformationMap service. Represents a row in the &quot;store_information_map&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.StoreInformationMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoreInformationMapImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see StoreInformationMapImpl
 * @see com.cloud.tags.model.StoreInformationMap
 * @see com.cloud.tags.model.StoreInformationMapModel
 * @generated
 */
@JSON(strict = true)
public class StoreInformationMapModelImpl extends BaseModelImpl<StoreInformationMap>
	implements StoreInformationMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a store information map model instance should use the {@link com.cloud.tags.model.StoreInformationMap} interface instead.
	 */
	public static final String TABLE_NAME = "store_information_map";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.BIGINT },
			{ "Name", Types.VARCHAR },
			{ "Address", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table store_information_map (uuid_ LONG not null primary key,Name VARCHAR(75) null,Address VARCHAR(75) null,companyId LONG,groupId LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table store_information_map";
	public static final String ORDER_BY_JPQL = " ORDER BY storeInformationMap.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY store_information_map.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.StoreInformationMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.StoreInformationMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StoreInformationMap toModel(StoreInformationMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StoreInformationMap model = new StoreInformationMapImpl();

		model.setUuid(soapModel.getUuid());
		model.setName(soapModel.getName());
		model.setAddress(soapModel.getAddress());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StoreInformationMap> toModels(
		StoreInformationMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StoreInformationMap> models = new ArrayList<StoreInformationMap>(soapModels.length);

		for (StoreInformationMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.StoreInformationMap"));

	public StoreInformationMapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uuid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StoreInformationMap.class;
	}

	@Override
	public String getModelClassName() {
		return StoreInformationMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("Name", getName());
		attributes.put("Address", getAddress());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long uuid = (Long)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}

		String Address = (String)attributes.get("Address");

		if (Address != null) {
			setAddress(Address);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getUuid() {
		return _uuid;
	}

	@Override
	public void setUuid(long uuid) {
		_uuid = uuid;
	}

	@JSON
	@Override
	public String getName() {
		if (_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _Name;
		}
	}

	@Override
	public void setName(String Name) {
		_Name = Name;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_Address == null) {
			return StringPool.BLANK;
		}
		else {
			return _Address;
		}
	}

	@Override
	public void setAddress(String Address) {
		_Address = Address;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			StoreInformationMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StoreInformationMap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StoreInformationMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StoreInformationMapImpl storeInformationMapImpl = new StoreInformationMapImpl();

		storeInformationMapImpl.setUuid(getUuid());
		storeInformationMapImpl.setName(getName());
		storeInformationMapImpl.setAddress(getAddress());
		storeInformationMapImpl.setCompanyId(getCompanyId());
		storeInformationMapImpl.setGroupId(getGroupId());
		storeInformationMapImpl.setCreateDate(getCreateDate());

		storeInformationMapImpl.resetOriginalValues();

		return storeInformationMapImpl;
	}

	@Override
	public int compareTo(StoreInformationMap storeInformationMap) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				storeInformationMap.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StoreInformationMap)) {
			return false;
		}

		StoreInformationMap storeInformationMap = (StoreInformationMap)obj;

		long primaryKey = storeInformationMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StoreInformationMap> toCacheModel() {
		StoreInformationMapCacheModel storeInformationMapCacheModel = new StoreInformationMapCacheModel();

		storeInformationMapCacheModel.uuid = getUuid();

		storeInformationMapCacheModel.Name = getName();

		String Name = storeInformationMapCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			storeInformationMapCacheModel.Name = null;
		}

		storeInformationMapCacheModel.Address = getAddress();

		String Address = storeInformationMapCacheModel.Address;

		if ((Address != null) && (Address.length() == 0)) {
			storeInformationMapCacheModel.Address = null;
		}

		storeInformationMapCacheModel.companyId = getCompanyId();

		storeInformationMapCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			storeInformationMapCacheModel.createDate = createDate.getTime();
		}
		else {
			storeInformationMapCacheModel.createDate = Long.MIN_VALUE;
		}

		return storeInformationMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", Name=");
		sb.append(getName());
		sb.append(", Address=");
		sb.append(getAddress());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.StoreInformationMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StoreInformationMap.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StoreInformationMap.class
		};
	private long _uuid;
	private String _Name;
	private String _Address;
	private long _companyId;
	private long _groupId;
	private Date _createDate;
	private StoreInformationMap _escapedModel;
}