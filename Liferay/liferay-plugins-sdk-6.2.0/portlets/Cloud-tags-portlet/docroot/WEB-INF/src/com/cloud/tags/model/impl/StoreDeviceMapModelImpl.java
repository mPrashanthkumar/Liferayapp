/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.StoreDeviceMap;
import com.cloud.tags.model.StoreDeviceMapModel;
import com.cloud.tags.model.StoreDeviceMapSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StoreDeviceMap service. Represents a row in the &quot;store_device_map&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.StoreDeviceMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoreDeviceMapImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see StoreDeviceMapImpl
 * @see com.cloud.tags.model.StoreDeviceMap
 * @see com.cloud.tags.model.StoreDeviceMapModel
 * @generated
 */
@JSON(strict = true)
public class StoreDeviceMapModelImpl extends BaseModelImpl<StoreDeviceMap>
	implements StoreDeviceMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a store device map model instance should use the {@link com.cloud.tags.model.StoreDeviceMap} interface instead.
	 */
	public static final String TABLE_NAME = "store_device_map";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.BIGINT },
			{ "storeName", Types.VARCHAR },
			{ "deviceMacAddress", Types.VARCHAR },
			{ "storeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table store_device_map (uuid_ LONG not null primary key,storeName VARCHAR(75) null,deviceMacAddress VARCHAR(75) null,storeId LONG,companyId LONG,groupId LONG,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table store_device_map";
	public static final String ORDER_BY_JPQL = " ORDER BY storeDeviceMap.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY store_device_map.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.StoreDeviceMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.StoreDeviceMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.StoreDeviceMap"),
			true);
	public static long DEVICEMACADDRESS_COLUMN_BITMASK = 1L;
	public static long STORENAME_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StoreDeviceMap toModel(StoreDeviceMapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StoreDeviceMap model = new StoreDeviceMapImpl();

		model.setUuid(soapModel.getUuid());
		model.setStoreName(soapModel.getStoreName());
		model.setDeviceMacAddress(soapModel.getDeviceMacAddress());
		model.setStoreId(soapModel.getStoreId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StoreDeviceMap> toModels(StoreDeviceMapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StoreDeviceMap> models = new ArrayList<StoreDeviceMap>(soapModels.length);

		for (StoreDeviceMapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.StoreDeviceMap"));

	public StoreDeviceMapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uuid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUuid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uuid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StoreDeviceMap.class;
	}

	@Override
	public String getModelClassName() {
		return StoreDeviceMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("storeName", getStoreName());
		attributes.put("deviceMacAddress", getDeviceMacAddress());
		attributes.put("storeId", getStoreId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long uuid = (Long)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String storeName = (String)attributes.get("storeName");

		if (storeName != null) {
			setStoreName(storeName);
		}

		String deviceMacAddress = (String)attributes.get("deviceMacAddress");

		if (deviceMacAddress != null) {
			setDeviceMacAddress(deviceMacAddress);
		}

		Long storeId = (Long)attributes.get("storeId");

		if (storeId != null) {
			setStoreId(storeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getUuid() {
		return _uuid;
	}

	@Override
	public void setUuid(long uuid) {
		_uuid = uuid;
	}

	@JSON
	@Override
	public String getStoreName() {
		if (_storeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _storeName;
		}
	}

	@Override
	public void setStoreName(String storeName) {
		_columnBitmask |= STORENAME_COLUMN_BITMASK;

		if (_originalStoreName == null) {
			_originalStoreName = _storeName;
		}

		_storeName = storeName;
	}

	public String getOriginalStoreName() {
		return GetterUtil.getString(_originalStoreName);
	}

	@JSON
	@Override
	public String getDeviceMacAddress() {
		if (_deviceMacAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _deviceMacAddress;
		}
	}

	@Override
	public void setDeviceMacAddress(String deviceMacAddress) {
		_columnBitmask |= DEVICEMACADDRESS_COLUMN_BITMASK;

		if (_originalDeviceMacAddress == null) {
			_originalDeviceMacAddress = _deviceMacAddress;
		}

		_deviceMacAddress = deviceMacAddress;
	}

	public String getOriginalDeviceMacAddress() {
		return GetterUtil.getString(_originalDeviceMacAddress);
	}

	@JSON
	@Override
	public long getStoreId() {
		return _storeId;
	}

	@Override
	public void setStoreId(long storeId) {
		_storeId = storeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			StoreDeviceMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StoreDeviceMap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StoreDeviceMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StoreDeviceMapImpl storeDeviceMapImpl = new StoreDeviceMapImpl();

		storeDeviceMapImpl.setUuid(getUuid());
		storeDeviceMapImpl.setStoreName(getStoreName());
		storeDeviceMapImpl.setDeviceMacAddress(getDeviceMacAddress());
		storeDeviceMapImpl.setStoreId(getStoreId());
		storeDeviceMapImpl.setCompanyId(getCompanyId());
		storeDeviceMapImpl.setGroupId(getGroupId());
		storeDeviceMapImpl.setCreateDate(getCreateDate());

		storeDeviceMapImpl.resetOriginalValues();

		return storeDeviceMapImpl;
	}

	@Override
	public int compareTo(StoreDeviceMap storeDeviceMap) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				storeDeviceMap.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StoreDeviceMap)) {
			return false;
		}

		StoreDeviceMap storeDeviceMap = (StoreDeviceMap)obj;

		long primaryKey = storeDeviceMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StoreDeviceMapModelImpl storeDeviceMapModelImpl = this;

		storeDeviceMapModelImpl._originalStoreName = storeDeviceMapModelImpl._storeName;

		storeDeviceMapModelImpl._originalDeviceMacAddress = storeDeviceMapModelImpl._deviceMacAddress;

		storeDeviceMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StoreDeviceMap> toCacheModel() {
		StoreDeviceMapCacheModel storeDeviceMapCacheModel = new StoreDeviceMapCacheModel();

		storeDeviceMapCacheModel.uuid = getUuid();

		storeDeviceMapCacheModel.storeName = getStoreName();

		String storeName = storeDeviceMapCacheModel.storeName;

		if ((storeName != null) && (storeName.length() == 0)) {
			storeDeviceMapCacheModel.storeName = null;
		}

		storeDeviceMapCacheModel.deviceMacAddress = getDeviceMacAddress();

		String deviceMacAddress = storeDeviceMapCacheModel.deviceMacAddress;

		if ((deviceMacAddress != null) && (deviceMacAddress.length() == 0)) {
			storeDeviceMapCacheModel.deviceMacAddress = null;
		}

		storeDeviceMapCacheModel.storeId = getStoreId();

		storeDeviceMapCacheModel.companyId = getCompanyId();

		storeDeviceMapCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			storeDeviceMapCacheModel.createDate = createDate.getTime();
		}
		else {
			storeDeviceMapCacheModel.createDate = Long.MIN_VALUE;
		}

		return storeDeviceMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", storeName=");
		sb.append(getStoreName());
		sb.append(", deviceMacAddress=");
		sb.append(getDeviceMacAddress());
		sb.append(", storeId=");
		sb.append(getStoreId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.StoreDeviceMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>storeName</column-name><column-value><![CDATA[");
		sb.append(getStoreName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceMacAddress</column-name><column-value><![CDATA[");
		sb.append(getDeviceMacAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>storeId</column-name><column-value><![CDATA[");
		sb.append(getStoreId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StoreDeviceMap.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StoreDeviceMap.class
		};
	private long _uuid;
	private String _storeName;
	private String _originalStoreName;
	private String _deviceMacAddress;
	private String _originalDeviceMacAddress;
	private long _storeId;
	private long _companyId;
	private long _groupId;
	private Date _createDate;
	private long _columnBitmask;
	private StoreDeviceMap _escapedModel;
}