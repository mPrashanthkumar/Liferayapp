/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model.impl;

import com.cloud.tags.model.Designers;
import com.cloud.tags.model.DesignersModel;
import com.cloud.tags.model.DesignersSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Designers service. Represents a row in the &quot;designers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.cloud.tags.model.DesignersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DesignersImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see DesignersImpl
 * @see com.cloud.tags.model.Designers
 * @see com.cloud.tags.model.DesignersModel
 * @generated
 */
@JSON(strict = true)
public class DesignersModelImpl extends BaseModelImpl<Designers>
	implements DesignersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a designers model instance should use the {@link com.cloud.tags.model.Designers} interface instead.
	 */
	public static final String TABLE_NAME = "designers";
	public static final Object[][] TABLE_COLUMNS = {
			{ "designId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "productTitle", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "shortDescription", Types.VARCHAR },
			{ "price", Types.VARCHAR },
			{ "public_url", Types.VARCHAR },
			{ "short_url", Types.VARCHAR },
			{ "slug", Types.VARCHAR },
			{ "sizes", Types.VARCHAR },
			{ "colors", Types.VARCHAR },
			{ "brand", Types.VARCHAR },
			{ "saleprice", Types.VARCHAR },
			{ "retailprice", Types.VARCHAR },
			{ "instock", Types.VARCHAR },
			{ "parentid", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "productcode", Types.VARCHAR },
			{ "barcode", Types.VARCHAR },
			{ "matchWith", Types.VARCHAR },
			{ "timerDate", Types.VARCHAR },
			{ "tabcurrent", Types.BOOLEAN },
			{ "liked", Types.BIGINT },
			{ "ctapp_shorturl", Types.BOOLEAN },
			{ "ctapp_shorturl_success", Types.BOOLEAN },
			{ "sayduck", Types.BOOLEAN },
			{ "left_description", Types.VARCHAR },
			{ "right_description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table designers (designId LONG not null primary key,userId LONG,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,name TEXT null,productTitle TEXT null,description TEXT null,shortDescription TEXT null,price VARCHAR(75) null,public_url TEXT null,short_url VARCHAR(75) null,slug VARCHAR(75) null,sizes VARCHAR(75) null,colors VARCHAR(75) null,brand VARCHAR(75) null,saleprice VARCHAR(75) null,retailprice VARCHAR(75) null,instock VARCHAR(75) null,parentid VARCHAR(75) null,category VARCHAR(75) null,productcode VARCHAR(75) null,barcode VARCHAR(75) null,matchWith TEXT null,timerDate VARCHAR(75) null,tabcurrent BOOLEAN,liked LONG,ctapp_shorturl BOOLEAN,ctapp_shorturl_success BOOLEAN,sayduck BOOLEAN,left_description TEXT null,right_description TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table designers";
	public static final String ORDER_BY_JPQL = " ORDER BY designers.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY designers.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.cloud.tags.model.Designers"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.cloud.tags.model.Designers"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.cloud.tags.model.Designers"),
			true);
	public static long BARCODE_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long PRODUCTCODE_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Designers toModel(DesignersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Designers model = new DesignersImpl();

		model.setDesignId(soapModel.getDesignId());
		model.setUserId(soapModel.getUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setProductTitle(soapModel.getProductTitle());
		model.setDescription(soapModel.getDescription());
		model.setShortDescription(soapModel.getShortDescription());
		model.setPrice(soapModel.getPrice());
		model.setPublic_url(soapModel.getPublic_url());
		model.setShort_url(soapModel.getShort_url());
		model.setSlug(soapModel.getSlug());
		model.setSizes(soapModel.getSizes());
		model.setColors(soapModel.getColors());
		model.setBrand(soapModel.getBrand());
		model.setSaleprice(soapModel.getSaleprice());
		model.setRetailprice(soapModel.getRetailprice());
		model.setInstock(soapModel.getInstock());
		model.setParentid(soapModel.getParentid());
		model.setCategory(soapModel.getCategory());
		model.setProductcode(soapModel.getProductcode());
		model.setBarcode(soapModel.getBarcode());
		model.setMatchWith(soapModel.getMatchWith());
		model.setTimerDate(soapModel.getTimerDate());
		model.setTabcurrent(soapModel.getTabcurrent());
		model.setLiked(soapModel.getLiked());
		model.setCtapp_shorturl(soapModel.getCtapp_shorturl());
		model.setCtapp_shorturl_success(soapModel.getCtapp_shorturl_success());
		model.setSayduck(soapModel.getSayduck());
		model.setLeft_description(soapModel.getLeft_description());
		model.setRight_description(soapModel.getRight_description());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Designers> toModels(DesignersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Designers> models = new ArrayList<Designers>(soapModels.length);

		for (DesignersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.cloud.tags.model.Designers"));

	public DesignersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _designId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDesignId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _designId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Designers.class;
	}

	@Override
	public String getModelClassName() {
		return Designers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("designId", getDesignId());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("productTitle", getProductTitle());
		attributes.put("description", getDescription());
		attributes.put("shortDescription", getShortDescription());
		attributes.put("price", getPrice());
		attributes.put("public_url", getPublic_url());
		attributes.put("short_url", getShort_url());
		attributes.put("slug", getSlug());
		attributes.put("sizes", getSizes());
		attributes.put("colors", getColors());
		attributes.put("brand", getBrand());
		attributes.put("saleprice", getSaleprice());
		attributes.put("retailprice", getRetailprice());
		attributes.put("instock", getInstock());
		attributes.put("parentid", getParentid());
		attributes.put("category", getCategory());
		attributes.put("productcode", getProductcode());
		attributes.put("barcode", getBarcode());
		attributes.put("matchWith", getMatchWith());
		attributes.put("timerDate", getTimerDate());
		attributes.put("tabcurrent", getTabcurrent());
		attributes.put("liked", getLiked());
		attributes.put("ctapp_shorturl", getCtapp_shorturl());
		attributes.put("ctapp_shorturl_success", getCtapp_shorturl_success());
		attributes.put("sayduck", getSayduck());
		attributes.put("left_description", getLeft_description());
		attributes.put("right_description", getRight_description());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long designId = (Long)attributes.get("designId");

		if (designId != null) {
			setDesignId(designId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String productTitle = (String)attributes.get("productTitle");

		if (productTitle != null) {
			setProductTitle(productTitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String shortDescription = (String)attributes.get("shortDescription");

		if (shortDescription != null) {
			setShortDescription(shortDescription);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String public_url = (String)attributes.get("public_url");

		if (public_url != null) {
			setPublic_url(public_url);
		}

		String short_url = (String)attributes.get("short_url");

		if (short_url != null) {
			setShort_url(short_url);
		}

		String slug = (String)attributes.get("slug");

		if (slug != null) {
			setSlug(slug);
		}

		String sizes = (String)attributes.get("sizes");

		if (sizes != null) {
			setSizes(sizes);
		}

		String colors = (String)attributes.get("colors");

		if (colors != null) {
			setColors(colors);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String saleprice = (String)attributes.get("saleprice");

		if (saleprice != null) {
			setSaleprice(saleprice);
		}

		String retailprice = (String)attributes.get("retailprice");

		if (retailprice != null) {
			setRetailprice(retailprice);
		}

		String instock = (String)attributes.get("instock");

		if (instock != null) {
			setInstock(instock);
		}

		String parentid = (String)attributes.get("parentid");

		if (parentid != null) {
			setParentid(parentid);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String productcode = (String)attributes.get("productcode");

		if (productcode != null) {
			setProductcode(productcode);
		}

		String barcode = (String)attributes.get("barcode");

		if (barcode != null) {
			setBarcode(barcode);
		}

		String matchWith = (String)attributes.get("matchWith");

		if (matchWith != null) {
			setMatchWith(matchWith);
		}

		String timerDate = (String)attributes.get("timerDate");

		if (timerDate != null) {
			setTimerDate(timerDate);
		}

		Boolean tabcurrent = (Boolean)attributes.get("tabcurrent");

		if (tabcurrent != null) {
			setTabcurrent(tabcurrent);
		}

		Long liked = (Long)attributes.get("liked");

		if (liked != null) {
			setLiked(liked);
		}

		Boolean ctapp_shorturl = (Boolean)attributes.get("ctapp_shorturl");

		if (ctapp_shorturl != null) {
			setCtapp_shorturl(ctapp_shorturl);
		}

		Boolean ctapp_shorturl_success = (Boolean)attributes.get(
				"ctapp_shorturl_success");

		if (ctapp_shorturl_success != null) {
			setCtapp_shorturl_success(ctapp_shorturl_success);
		}

		Boolean sayduck = (Boolean)attributes.get("sayduck");

		if (sayduck != null) {
			setSayduck(sayduck);
		}

		String left_description = (String)attributes.get("left_description");

		if (left_description != null) {
			setLeft_description(left_description);
		}

		String right_description = (String)attributes.get("right_description");

		if (right_description != null) {
			setRight_description(right_description);
		}
	}

	@JSON
	@Override
	public long getDesignId() {
		return _designId;
	}

	@Override
	public void setDesignId(long designId) {
		_designId = designId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getProductTitle() {
		if (_productTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _productTitle;
		}
	}

	@Override
	public void setProductTitle(String productTitle) {
		_productTitle = productTitle;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public void setShortDescription(String shortDescription) {
		_shortDescription = shortDescription;
	}

	@JSON
	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@JSON
	@Override
	public String getPublic_url() {
		if (_public_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _public_url;
		}
	}

	@Override
	public void setPublic_url(String public_url) {
		_public_url = public_url;
	}

	@JSON
	@Override
	public String getShort_url() {
		if (_short_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _short_url;
		}
	}

	@Override
	public void setShort_url(String short_url) {
		_short_url = short_url;
	}

	@JSON
	@Override
	public String getSlug() {
		if (_slug == null) {
			return StringPool.BLANK;
		}
		else {
			return _slug;
		}
	}

	@Override
	public void setSlug(String slug) {
		_slug = slug;
	}

	@JSON
	@Override
	public String getSizes() {
		if (_sizes == null) {
			return StringPool.BLANK;
		}
		else {
			return _sizes;
		}
	}

	@Override
	public void setSizes(String sizes) {
		_sizes = sizes;
	}

	@JSON
	@Override
	public String getColors() {
		if (_colors == null) {
			return StringPool.BLANK;
		}
		else {
			return _colors;
		}
	}

	@Override
	public void setColors(String colors) {
		_colors = colors;
	}

	@JSON
	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@JSON
	@Override
	public String getSaleprice() {
		if (_saleprice == null) {
			return StringPool.BLANK;
		}
		else {
			return _saleprice;
		}
	}

	@Override
	public void setSaleprice(String saleprice) {
		_saleprice = saleprice;
	}

	@JSON
	@Override
	public String getRetailprice() {
		if (_retailprice == null) {
			return StringPool.BLANK;
		}
		else {
			return _retailprice;
		}
	}

	@Override
	public void setRetailprice(String retailprice) {
		_retailprice = retailprice;
	}

	@JSON
	@Override
	public String getInstock() {
		if (_instock == null) {
			return StringPool.BLANK;
		}
		else {
			return _instock;
		}
	}

	@Override
	public void setInstock(String instock) {
		_instock = instock;
	}

	@JSON
	@Override
	public String getParentid() {
		if (_parentid == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentid;
		}
	}

	@Override
	public void setParentid(String parentid) {
		_parentid = parentid;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	@Override
	public String getProductcode() {
		if (_productcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productcode;
		}
	}

	@Override
	public void setProductcode(String productcode) {
		_columnBitmask |= PRODUCTCODE_COLUMN_BITMASK;

		if (_originalProductcode == null) {
			_originalProductcode = _productcode;
		}

		_productcode = productcode;
	}

	public String getOriginalProductcode() {
		return GetterUtil.getString(_originalProductcode);
	}

	@JSON
	@Override
	public String getBarcode() {
		if (_barcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _barcode;
		}
	}

	@Override
	public void setBarcode(String barcode) {
		_columnBitmask |= BARCODE_COLUMN_BITMASK;

		if (_originalBarcode == null) {
			_originalBarcode = _barcode;
		}

		_barcode = barcode;
	}

	public String getOriginalBarcode() {
		return GetterUtil.getString(_originalBarcode);
	}

	@JSON
	@Override
	public String getMatchWith() {
		if (_matchWith == null) {
			return StringPool.BLANK;
		}
		else {
			return _matchWith;
		}
	}

	@Override
	public void setMatchWith(String matchWith) {
		_matchWith = matchWith;
	}

	@JSON
	@Override
	public String getTimerDate() {
		if (_timerDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _timerDate;
		}
	}

	@Override
	public void setTimerDate(String timerDate) {
		_timerDate = timerDate;
	}

	@JSON
	@Override
	public boolean getTabcurrent() {
		return _tabcurrent;
	}

	@Override
	public boolean isTabcurrent() {
		return _tabcurrent;
	}

	@Override
	public void setTabcurrent(boolean tabcurrent) {
		_tabcurrent = tabcurrent;
	}

	@JSON
	@Override
	public long getLiked() {
		return _liked;
	}

	@Override
	public void setLiked(long liked) {
		_liked = liked;
	}

	@JSON
	@Override
	public boolean getCtapp_shorturl() {
		return _ctapp_shorturl;
	}

	@Override
	public boolean isCtapp_shorturl() {
		return _ctapp_shorturl;
	}

	@Override
	public void setCtapp_shorturl(boolean ctapp_shorturl) {
		_ctapp_shorturl = ctapp_shorturl;
	}

	@JSON
	@Override
	public boolean getCtapp_shorturl_success() {
		return _ctapp_shorturl_success;
	}

	@Override
	public boolean isCtapp_shorturl_success() {
		return _ctapp_shorturl_success;
	}

	@Override
	public void setCtapp_shorturl_success(boolean ctapp_shorturl_success) {
		_ctapp_shorturl_success = ctapp_shorturl_success;
	}

	@JSON
	@Override
	public boolean getSayduck() {
		return _sayduck;
	}

	@Override
	public boolean isSayduck() {
		return _sayduck;
	}

	@Override
	public void setSayduck(boolean sayduck) {
		_sayduck = sayduck;
	}

	@JSON
	@Override
	public String getLeft_description() {
		if (_left_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _left_description;
		}
	}

	@Override
	public void setLeft_description(String left_description) {
		_left_description = left_description;
	}

	@JSON
	@Override
	public String getRight_description() {
		if (_right_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _right_description;
		}
	}

	@Override
	public void setRight_description(String right_description) {
		_right_description = right_description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Designers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Designers toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Designers)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DesignersImpl designersImpl = new DesignersImpl();

		designersImpl.setDesignId(getDesignId());
		designersImpl.setUserId(getUserId());
		designersImpl.setCompanyId(getCompanyId());
		designersImpl.setGroupId(getGroupId());
		designersImpl.setCreateDate(getCreateDate());
		designersImpl.setModifiedDate(getModifiedDate());
		designersImpl.setName(getName());
		designersImpl.setProductTitle(getProductTitle());
		designersImpl.setDescription(getDescription());
		designersImpl.setShortDescription(getShortDescription());
		designersImpl.setPrice(getPrice());
		designersImpl.setPublic_url(getPublic_url());
		designersImpl.setShort_url(getShort_url());
		designersImpl.setSlug(getSlug());
		designersImpl.setSizes(getSizes());
		designersImpl.setColors(getColors());
		designersImpl.setBrand(getBrand());
		designersImpl.setSaleprice(getSaleprice());
		designersImpl.setRetailprice(getRetailprice());
		designersImpl.setInstock(getInstock());
		designersImpl.setParentid(getParentid());
		designersImpl.setCategory(getCategory());
		designersImpl.setProductcode(getProductcode());
		designersImpl.setBarcode(getBarcode());
		designersImpl.setMatchWith(getMatchWith());
		designersImpl.setTimerDate(getTimerDate());
		designersImpl.setTabcurrent(getTabcurrent());
		designersImpl.setLiked(getLiked());
		designersImpl.setCtapp_shorturl(getCtapp_shorturl());
		designersImpl.setCtapp_shorturl_success(getCtapp_shorturl_success());
		designersImpl.setSayduck(getSayduck());
		designersImpl.setLeft_description(getLeft_description());
		designersImpl.setRight_description(getRight_description());

		designersImpl.resetOriginalValues();

		return designersImpl;
	}

	@Override
	public int compareTo(Designers designers) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), designers.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Designers)) {
			return false;
		}

		Designers designers = (Designers)obj;

		long primaryKey = designers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DesignersModelImpl designersModelImpl = this;

		designersModelImpl._originalCompanyId = designersModelImpl._companyId;

		designersModelImpl._setOriginalCompanyId = false;

		designersModelImpl._originalProductcode = designersModelImpl._productcode;

		designersModelImpl._originalBarcode = designersModelImpl._barcode;

		designersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Designers> toCacheModel() {
		DesignersCacheModel designersCacheModel = new DesignersCacheModel();

		designersCacheModel.designId = getDesignId();

		designersCacheModel.userId = getUserId();

		designersCacheModel.companyId = getCompanyId();

		designersCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			designersCacheModel.createDate = createDate.getTime();
		}
		else {
			designersCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			designersCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			designersCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		designersCacheModel.name = getName();

		String name = designersCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			designersCacheModel.name = null;
		}

		designersCacheModel.productTitle = getProductTitle();

		String productTitle = designersCacheModel.productTitle;

		if ((productTitle != null) && (productTitle.length() == 0)) {
			designersCacheModel.productTitle = null;
		}

		designersCacheModel.description = getDescription();

		String description = designersCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			designersCacheModel.description = null;
		}

		designersCacheModel.shortDescription = getShortDescription();

		String shortDescription = designersCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			designersCacheModel.shortDescription = null;
		}

		designersCacheModel.price = getPrice();

		String price = designersCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			designersCacheModel.price = null;
		}

		designersCacheModel.public_url = getPublic_url();

		String public_url = designersCacheModel.public_url;

		if ((public_url != null) && (public_url.length() == 0)) {
			designersCacheModel.public_url = null;
		}

		designersCacheModel.short_url = getShort_url();

		String short_url = designersCacheModel.short_url;

		if ((short_url != null) && (short_url.length() == 0)) {
			designersCacheModel.short_url = null;
		}

		designersCacheModel.slug = getSlug();

		String slug = designersCacheModel.slug;

		if ((slug != null) && (slug.length() == 0)) {
			designersCacheModel.slug = null;
		}

		designersCacheModel.sizes = getSizes();

		String sizes = designersCacheModel.sizes;

		if ((sizes != null) && (sizes.length() == 0)) {
			designersCacheModel.sizes = null;
		}

		designersCacheModel.colors = getColors();

		String colors = designersCacheModel.colors;

		if ((colors != null) && (colors.length() == 0)) {
			designersCacheModel.colors = null;
		}

		designersCacheModel.brand = getBrand();

		String brand = designersCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			designersCacheModel.brand = null;
		}

		designersCacheModel.saleprice = getSaleprice();

		String saleprice = designersCacheModel.saleprice;

		if ((saleprice != null) && (saleprice.length() == 0)) {
			designersCacheModel.saleprice = null;
		}

		designersCacheModel.retailprice = getRetailprice();

		String retailprice = designersCacheModel.retailprice;

		if ((retailprice != null) && (retailprice.length() == 0)) {
			designersCacheModel.retailprice = null;
		}

		designersCacheModel.instock = getInstock();

		String instock = designersCacheModel.instock;

		if ((instock != null) && (instock.length() == 0)) {
			designersCacheModel.instock = null;
		}

		designersCacheModel.parentid = getParentid();

		String parentid = designersCacheModel.parentid;

		if ((parentid != null) && (parentid.length() == 0)) {
			designersCacheModel.parentid = null;
		}

		designersCacheModel.category = getCategory();

		String category = designersCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			designersCacheModel.category = null;
		}

		designersCacheModel.productcode = getProductcode();

		String productcode = designersCacheModel.productcode;

		if ((productcode != null) && (productcode.length() == 0)) {
			designersCacheModel.productcode = null;
		}

		designersCacheModel.barcode = getBarcode();

		String barcode = designersCacheModel.barcode;

		if ((barcode != null) && (barcode.length() == 0)) {
			designersCacheModel.barcode = null;
		}

		designersCacheModel.matchWith = getMatchWith();

		String matchWith = designersCacheModel.matchWith;

		if ((matchWith != null) && (matchWith.length() == 0)) {
			designersCacheModel.matchWith = null;
		}

		designersCacheModel.timerDate = getTimerDate();

		String timerDate = designersCacheModel.timerDate;

		if ((timerDate != null) && (timerDate.length() == 0)) {
			designersCacheModel.timerDate = null;
		}

		designersCacheModel.tabcurrent = getTabcurrent();

		designersCacheModel.liked = getLiked();

		designersCacheModel.ctapp_shorturl = getCtapp_shorturl();

		designersCacheModel.ctapp_shorturl_success = getCtapp_shorturl_success();

		designersCacheModel.sayduck = getSayduck();

		designersCacheModel.left_description = getLeft_description();

		String left_description = designersCacheModel.left_description;

		if ((left_description != null) && (left_description.length() == 0)) {
			designersCacheModel.left_description = null;
		}

		designersCacheModel.right_description = getRight_description();

		String right_description = designersCacheModel.right_description;

		if ((right_description != null) && (right_description.length() == 0)) {
			designersCacheModel.right_description = null;
		}

		return designersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(67);

		sb.append("{designId=");
		sb.append(getDesignId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", productTitle=");
		sb.append(getProductTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", shortDescription=");
		sb.append(getShortDescription());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", public_url=");
		sb.append(getPublic_url());
		sb.append(", short_url=");
		sb.append(getShort_url());
		sb.append(", slug=");
		sb.append(getSlug());
		sb.append(", sizes=");
		sb.append(getSizes());
		sb.append(", colors=");
		sb.append(getColors());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", saleprice=");
		sb.append(getSaleprice());
		sb.append(", retailprice=");
		sb.append(getRetailprice());
		sb.append(", instock=");
		sb.append(getInstock());
		sb.append(", parentid=");
		sb.append(getParentid());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", productcode=");
		sb.append(getProductcode());
		sb.append(", barcode=");
		sb.append(getBarcode());
		sb.append(", matchWith=");
		sb.append(getMatchWith());
		sb.append(", timerDate=");
		sb.append(getTimerDate());
		sb.append(", tabcurrent=");
		sb.append(getTabcurrent());
		sb.append(", liked=");
		sb.append(getLiked());
		sb.append(", ctapp_shorturl=");
		sb.append(getCtapp_shorturl());
		sb.append(", ctapp_shorturl_success=");
		sb.append(getCtapp_shorturl_success());
		sb.append(", sayduck=");
		sb.append(getSayduck());
		sb.append(", left_description=");
		sb.append(getLeft_description());
		sb.append(", right_description=");
		sb.append(getRight_description());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(103);

		sb.append("<model><model-name>");
		sb.append("com.cloud.tags.model.Designers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>designId</column-name><column-value><![CDATA[");
		sb.append(getDesignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productTitle</column-name><column-value><![CDATA[");
		sb.append(getProductTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescription</column-name><column-value><![CDATA[");
		sb.append(getShortDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>public_url</column-name><column-value><![CDATA[");
		sb.append(getPublic_url());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>short_url</column-name><column-value><![CDATA[");
		sb.append(getShort_url());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>slug</column-name><column-value><![CDATA[");
		sb.append(getSlug());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sizes</column-name><column-value><![CDATA[");
		sb.append(getSizes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>colors</column-name><column-value><![CDATA[");
		sb.append(getColors());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>saleprice</column-name><column-value><![CDATA[");
		sb.append(getSaleprice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>retailprice</column-name><column-value><![CDATA[");
		sb.append(getRetailprice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instock</column-name><column-value><![CDATA[");
		sb.append(getInstock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentid</column-name><column-value><![CDATA[");
		sb.append(getParentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productcode</column-name><column-value><![CDATA[");
		sb.append(getProductcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>barcode</column-name><column-value><![CDATA[");
		sb.append(getBarcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matchWith</column-name><column-value><![CDATA[");
		sb.append(getMatchWith());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timerDate</column-name><column-value><![CDATA[");
		sb.append(getTimerDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tabcurrent</column-name><column-value><![CDATA[");
		sb.append(getTabcurrent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>liked</column-name><column-value><![CDATA[");
		sb.append(getLiked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ctapp_shorturl</column-name><column-value><![CDATA[");
		sb.append(getCtapp_shorturl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ctapp_shorturl_success</column-name><column-value><![CDATA[");
		sb.append(getCtapp_shorturl_success());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sayduck</column-name><column-value><![CDATA[");
		sb.append(getSayduck());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>left_description</column-name><column-value><![CDATA[");
		sb.append(getLeft_description());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>right_description</column-name><column-value><![CDATA[");
		sb.append(getRight_description());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Designers.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Designers.class
		};
	private long _designId;
	private long _userId;
	private String _userUuid;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _productTitle;
	private String _description;
	private String _shortDescription;
	private String _price;
	private String _public_url;
	private String _short_url;
	private String _slug;
	private String _sizes;
	private String _colors;
	private String _brand;
	private String _saleprice;
	private String _retailprice;
	private String _instock;
	private String _parentid;
	private String _category;
	private String _productcode;
	private String _originalProductcode;
	private String _barcode;
	private String _originalBarcode;
	private String _matchWith;
	private String _timerDate;
	private boolean _tabcurrent;
	private long _liked;
	private boolean _ctapp_shorturl;
	private boolean _ctapp_shorturl_success;
	private boolean _sayduck;
	private String _left_description;
	private String _right_description;
	private long _columnBitmask;
	private Designers _escapedModel;
}