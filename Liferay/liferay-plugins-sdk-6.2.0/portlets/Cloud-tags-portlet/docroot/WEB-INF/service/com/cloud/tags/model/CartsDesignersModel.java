/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cloud.tags.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the CartsDesigners service. Represents a row in the &quot;cart_designers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.cloud.tags.model.impl.CartsDesignersModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.cloud.tags.model.impl.CartsDesignersImpl}.
 * </p>
 *
 * @author Mohammed Zaheer
 * @see CartsDesigners
 * @see com.cloud.tags.model.impl.CartsDesignersImpl
 * @see com.cloud.tags.model.impl.CartsDesignersModelImpl
 * @generated
 */
public interface CartsDesignersModel extends BaseModel<CartsDesigners> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a carts designers model instance should use the {@link CartsDesigners} interface instead.
	 */

	/**
	 * Returns the primary key of this carts designers.
	 *
	 * @return the primary key of this carts designers
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this carts designers.
	 *
	 * @param primaryKey the primary key of this carts designers
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the cart designer ID of this carts designers.
	 *
	 * @return the cart designer ID of this carts designers
	 */
	public long getCartDesignerId();

	/**
	 * Sets the cart designer ID of this carts designers.
	 *
	 * @param cartDesignerId the cart designer ID of this carts designers
	 */
	public void setCartDesignerId(long cartDesignerId);

	/**
	 * Returns the cart ID of this carts designers.
	 *
	 * @return the cart ID of this carts designers
	 */
	public long getCartId();

	/**
	 * Sets the cart ID of this carts designers.
	 *
	 * @param cartId the cart ID of this carts designers
	 */
	public void setCartId(long cartId);

	/**
	 * Returns the design ID of this carts designers.
	 *
	 * @return the design ID of this carts designers
	 */
	public long getDesignId();

	/**
	 * Sets the design ID of this carts designers.
	 *
	 * @param designId the design ID of this carts designers
	 */
	public void setDesignId(long designId);

	/**
	 * Returns the create date of this carts designers.
	 *
	 * @return the create date of this carts designers
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this carts designers.
	 *
	 * @param createDate the create date of this carts designers
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this carts designers.
	 *
	 * @return the modified date of this carts designers
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this carts designers.
	 *
	 * @param modifiedDate the modified date of this carts designers
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the kept of this carts designers.
	 *
	 * @return the kept of this carts designers
	 */
	public boolean getKept();

	/**
	 * Returns <code>true</code> if this carts designers is kept.
	 *
	 * @return <code>true</code> if this carts designers is kept; <code>false</code> otherwise
	 */
	public boolean isKept();

	/**
	 * Sets whether this carts designers is kept.
	 *
	 * @param kept the kept of this carts designers
	 */
	public void setKept(boolean kept);

	/**
	 * Returns the favorite of this carts designers.
	 *
	 * @return the favorite of this carts designers
	 */
	public boolean getFavorite();

	/**
	 * Returns <code>true</code> if this carts designers is favorite.
	 *
	 * @return <code>true</code> if this carts designers is favorite; <code>false</code> otherwise
	 */
	public boolean isFavorite();

	/**
	 * Sets whether this carts designers is favorite.
	 *
	 * @param favorite the favorite of this carts designers
	 */
	public void setFavorite(boolean favorite);

	/**
	 * Returns the staff ID of this carts designers.
	 *
	 * @return the staff ID of this carts designers
	 */
	@AutoEscape
	public String getStaffId();

	/**
	 * Sets the staff ID of this carts designers.
	 *
	 * @param staffId the staff ID of this carts designers
	 */
	public void setStaffId(String staffId);

	/**
	 * Returns the user note of this carts designers.
	 *
	 * @return the user note of this carts designers
	 */
	@AutoEscape
	public String getUserNote();

	/**
	 * Sets the user note of this carts designers.
	 *
	 * @param userNote the user note of this carts designers
	 */
	public void setUserNote(String userNote);

	/**
	 * Returns the x p computed of this carts designers.
	 *
	 * @return the x p computed of this carts designers
	 */
	public boolean getXPComputed();

	/**
	 * Returns <code>true</code> if this carts designers is x p computed.
	 *
	 * @return <code>true</code> if this carts designers is x p computed; <code>false</code> otherwise
	 */
	public boolean isXPComputed();

	/**
	 * Sets whether this carts designers is x p computed.
	 *
	 * @param XPComputed the x p computed of this carts designers
	 */
	public void setXPComputed(boolean XPComputed);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(CartsDesigners cartsDesigners);

	@Override
	public int hashCode();

	@Override
	public CacheModel<CartsDesigners> toCacheModel();

	@Override
	public CartsDesigners toEscapedModel();

	@Override
	public CartsDesigners toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}